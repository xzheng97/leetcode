---
layout: home
title:  "3Sum"
number: 15
level: "Medium"
topic: "Array, Two Pointers"
workDate: "06/15/20"
permalink: /:title
---
<a  style="color:#ffe57c;float:top" href="{{site.baseurl}}/index.html">Home</a>
<h2>3Sum</h2>

<h3 style="color:#ffe57c;"><a href="https://leetcode.com/problems/3sum/">Question</a></h3>


<p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>

<p>Note: The solution set must not contain duplicate triplets.</p>

<h3>Example:</h3>
<pre><code class="plaintext">Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
</code></pre>


<h3>Solution:</h3>
<p style="color: #ffc0cb">Note: This approach reduces the question to two-sum II after ordering the array. Avoid duplicate by skipping elements that are the same as their previous ones. And use two pointers to traverse</p>
<pre><code class="java">class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < nums.length && nums[i] <= 0; ++i)
            if (i == 0 || nums[i - 1] != nums[i])
                twoSumII(nums, i, res);
        return res;
    }
    void twoSumII(int[] nums, int i, List<List<Integer>> res) {
        int lo = i + 1, hi = nums.length - 1;
        while (lo < hi) {
            int sum = nums[i] + nums[lo] + nums[hi];
            if (sum < 0 || (lo > i + 1 && nums[lo] == nums[lo - 1]))
                ++lo;
            else if (sum > 0 || (hi < nums.length - 1 && nums[hi] == nums[hi + 1]))
                --hi;
            else
                res.add(Arrays.asList(nums[i], nums[lo++], nums[hi--]));
        }
    }
}</code></pre>


<p style="color: #ffc0cb">Note: This approach is very alike to 2sum, but it uses set and specific arrangement for triplets to avoid duplicates.</p>
<pre><code class="java">class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Set<Pair> found = new HashSet<>();
        for (int i = 0; i < nums.length; ++i) {
            Set<Integer> seen = new HashSet<>();
            for (int j = i + 1; j < nums.length; ++j) {
                int complement = -nums[i] - nums[j];
                if (seen.contains(complement)) {
                    int v1 = Math.min(nums[i], Math.min(complement, nums[j]));
                    int v2 = Math.max(nums[i], Math.max(complement, nums[j]));
                    if (found.add(new Pair(v1, v2)))
                        res.add(Arrays.asList(nums[i], complement, nums[j]));
                }
                seen.add(nums[j]);
            }
        }
        return res;
    }
}</code></pre>